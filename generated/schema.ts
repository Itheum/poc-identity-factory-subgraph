// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class IdentityDeployedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save IdentityDeployedEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type IdentityDeployedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("IdentityDeployedEntity", id.toString(), this);
    }
  }

  static load(id: string): IdentityDeployedEntity | null {
    return changetype<IdentityDeployedEntity | null>(
      store.get("IdentityDeployedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    return value!.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get unixTimestamp(): BigInt {
    let value = this.get("unixTimestamp");
    return value!.toBigInt();
  }

  set unixTimestamp(value: BigInt) {
    this.set("unixTimestamp", Value.fromBigInt(value));
  }
}

export class OwnerActionEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnerActionEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OwnerActionEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OwnerActionEntity", id.toString(), this);
    }
  }

  static load(id: string): OwnerActionEntity | null {
    return changetype<OwnerActionEntity | null>(
      store.get("OwnerActionEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    return value!.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get actionBy(): Bytes {
    let value = this.get("actionBy");
    return value!.toBytes();
  }

  set actionBy(value: Bytes) {
    this.set("actionBy", Value.fromBytes(value));
  }

  get actionType(): string {
    let value = this.get("actionType");
    return value!.toString();
  }

  set actionType(value: string) {
    this.set("actionType", Value.fromString(value));
  }

  get unixTimestamp(): BigInt {
    let value = this.get("unixTimestamp");
    return value!.toBigInt();
  }

  set unixTimestamp(value: BigInt) {
    this.set("unixTimestamp", Value.fromBigInt(value));
  }
}
